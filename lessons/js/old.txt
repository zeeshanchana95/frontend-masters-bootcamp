- JavaScript First Program: variable declaration

const montlyRent = 500; 
const yearlyRent = montlyRent * 12;
console.log(yearlyRent);  


- Program Flow:

const montlyRent = 500;

let yearlyRent = montlyRent * 12;
console.log(yearlyRent);  //2

yearlyRent = 1;
console.log(yearlyRent); //1


- How to print more than two values on same line?

const montlyRent = 500;
let yearlyRent = montlyRent * 12;
console.log(montlyRent, yearlyRent);  //2


- String Concatenation:

const firstName = "Zeeshan"
const lastName = "Ahmed"
const sentence = "Hello " + firstName + " " + lastName + "! How are you? "; //string concatenation 

console.log(sentence); //Hello Zeeshan Ahmed! How are you?


- Template String:

const firstName = "Zeeshan"
const lastName = "Ahmed"

const sentence = `Hello ${firstName} ${lastName}! How are you?`;

console.log(sentence); //Hello Zeeshan Ahmed! How are you?



/**
 * strings:
 *  - bunch of characters sitting next to each other
 *  - used for storing literal values like any word, sentence
 *  - value need to be enclosed inside Single Quotes '', Double Quotes "", or Backticks `` 
 * 
 * Syntax Error: 
 *  - means your grammar is bad, fix it
 *  - pretty easy to fix
 * 
 * String Concatenation:
 *  - connecting strings together
 *  - use + symbol to combine strings together
 */

const firstName = "Zeeshan"
const lastName = "Ahmed"

const sentence = `Hello ${firstName} ${lastName}! How are you?`;

console.log(sentence);









- Using Booleans:
const isSkyBlue = true;
console.log(isSkyBlue); //true



- Primitive Types: Number
const num = 10;
const num2 = 10.222;
const num3 = - 0.5;

console.log(num, num2, num3);


/**
 * Control Flow: 
 * - if-else statements
 * - ask questions inside if(question) and question has to be true or false
 * - block: whatever inside {} and ends when bracket ends } ends
 * - helps do conditional logic
 * 
 */

//like to make boolean questions, get the idea it is boolean
const isSkyBlue = true;

let greeting;

if(isSkyBlue) {
    greeting = "It must be nice weather"
    //execute if true
} else {
   greeting = "It must be not nice weather";//executes if false
}


- Is it necessary to always has boolean value inside if(true) directly?
No, can use expressions but that need to be evaluated as truty or falsy value


if(2 + 2 === 4) {
 // === means is equal to 
 console.log("Horray! Math still works")
} else {
    console.log("Uh, panic?")
}

//why ===, == still works
// == don't want to do becuase of cooersion 2 + 2 == "4" -> true but if 2 + 2 === "4" -> false


- If-else statements Q & A:
const isLightOn = true;

if(isLightOn) {
    //turn off the light
} else {
    //turn on the light
}

if(isLightOn){
    //executes if true
}
//executes other lines of code and skip if block if it is false and executes it also then other lines if true 



- //if-elseif-else statements

let friendsAtYourParty = 0;

if(friendsAtYourParty === 0) {
    console.log("Woo, now all the things is yours");
} else if(friendsAtYourParty >= 4) {
    console.log("That's good number for game");
} else {
    console.log("Let's dance")
}



- //loops-while loop-infinite loop

let friendsAtYourParty = 0;

while(friendsAtYourParty <= 10) {
    friendsAtYourParty = friendsAtYourParty + 1;
}
console.log(friendsAtYourParty); //10


- infinite loop

//loops-while loop-infinite loop

let friendsAtYourParty = 0;

while(friendsAtYourParty <= 10) {
    friendsAtYourParty = friendsAtYourParty;
}
console.log(friendsAtYourParty); //10



- //comments in js

let friendsAtYourParty = 0;

while(friendsAtYourParty <= 10) {

    // this is a single line comment in js
    friendsAtYourParty = friendsAtYourParty + 1;

    /*

    this is 
    
    multi-line comment in js

    */
}
console.log(friendsAtYourParty); //10




- //ways of increementing variables by one or by different value

let friendsAtYourParty = 0;

while(friendsAtYourParty <= 10) {

    //all the statements below are used for increementing the variable by 1;
    friendsAtYourParty = friendsAtYourParty + 1;
    friendsAtYourParty += 1;
    friendsAtYourParty++;
    ++friendsAtYourParty;


    console.log(friendsAtYourParty)
}
console.log(friendsAtYourParty); //10




- //for-loop
    //- used when know definite amount of time we need to execute set of instructions

let friendsAtYourParty = 0;

for(let i = 0; i < 10; i++){
    console.log(i);
    friendsAtYourParty++;
}

console.log(friendsAtYourParty);



- Exercise: /*
  Write some code that declares two variables, character and timesToRepeact.
  Using a loop, repeat that character that many times and then console.log it.
  Example, if I had character = 'f' and timesToRepeat = 5, it'd console.log
  'fffff'
*/
const character = 't'
const timesToRepeat = 5;
let resultString = '';

for(let i = 0; i < 5; i++){
  resultString += character;
}
console.log(resultString);



- functions:

//functions and parameters

function addTwo(number) {
return number + 2;
}

const finalAnswer = addTwo(5);
console.log(finalAnswer);


function greet(firstName, lastName, honorific, greeting) {
return `${greeting} ${honorific} ${lastName}! Iâ€™m extremely pleased you could join us, ${firstName}! I hope you enjoy your stay, ${honorific} ${lastName}.`;
}

console.log(greet("Brian", "Holt", "Lord", "Salutations"));
console.log(greet("Jack", "Sparrow", "Captain", "A-hoy"));



const myHomeCity = "Salt Lake City";
const myHomeState = "Utah";
const myHomeCountry = "USA";

function logOutYourHome(city, state, country) {
console.log(`You are from ${city}, ${state} ${country}.`);
}

logOutYourHome(myHomeCity, myHomeState, myHomeCountry);




- Scope:
function addFive(number) {
    const someVariable = "you can't see me outside this function";
    return number + 5;
  }
  
  addFive(10);
  console.log(someVariable);


  let friendsAtYourParty = 0;
for (let i = 0; i <= 10; i++) {
  friendsAtYourParty++;
}
console.log(i);



- Scope Example:
const A = "A";
let F;

function doStuff(B) {
  console.log(B); // works, B parameter is still in scope
  const C = "C";
  let H = "H";
  if (1 + 1 === 2) {
    const D = "D";
    H = "something else";
  }
  console.log(D); // does not work, D was declared in that if statement block
  console.log(H); // works, H was declared outside the if statement
  F = "F";
}

let E = 0;
while (E < 3) {
  E++;
  console.log(A); // works, the outter block (called the global scope) is still in scope
  const G = "G";
}
console.log(E); // works, E was declared outside the whie loop
console.log(G); // does not work, declared inside the while loop and it's over

doStuff("B");
console.log(B); // does not work, the B parameter expires after the function call
console.log(C); // does not work, C was declared inside the function and the function is over
console.log(F); // works, F was declared in the global scope


